#####################################################################
#           SISTEMA DE CALIBRA√á√ÉO AUTOM√ÅTICA POR TOQUE            #
#####################################################################
# Sistema de Calibra√ß√£o Autom√°tica de Offsets XYZ
# Usando Sensor de Toque para Multi-Tools
# Vers√£o: 2.0 - Calibra√ß√£o 3D Completa
# Data: Janeiro 2025
# Sistema proposto para calibra√ß√£o autom√°tica de offsets XYZ usando
# sensor de toque/press√£o para detectar contato do bico com superf√≠cie

[gcode_macro CAL_CFG]
description: Configura√ß√µes do sistema de calibra√ß√£o autom√°tica XYZ
variable_sensor_pin: "^host:gpio22"  # Pin do sensor de toque Z (pullup)
variable_reference_x: 100.0           # Posi√ß√£o X da superf√≠cie de refer√™ncia Z (pr√≥ximo ao eixo de eleva√ß√£o)
variable_reference_y: 310.0           # Posi√ß√£o Y da superf√≠cie de refer√™ncia Z (pr√≥ximo ao eixo de eleva√ß√£o)
variable_reference_z: 5.0             # Altura inicial segura

# Configura√ß√µes para calibra√ß√£o X e Y
variable_xy_calibration_enabled: True # Habilitar calibra√ß√£o XY autom√°tica
variable_pin_height: 3.0             # Altura do pino de a√ßo soldado (mm)
variable_x_sweep_distance: 15.0      # Dist√¢ncia de varredura para calibra√ß√£o X (mm)
variable_y_sweep_distance: 15.0      # Dist√¢ncia de varredura para calibra√ß√£o Y (mm)
variable_xy_probe_speed: 300         # Velocidade para sondagem XY

# Configura√ß√µes do sensor piezoel√©trico dedicado XY
variable_xy_sensor_enabled: True       # Habilita sensor XY dedicado
variable_xy_sensor_x: 150.0           # Posi√ß√£o X do sensor XY dedicado
variable_xy_sensor_y: 150.0           # Posi√ß√£o Y do sensor XY dedicado
variable_xy_sensor_z: 10.0            # Altura Z para detec√ß√£o XY
variable_xy_sensor_pin: "^PA1"         # Pino do sensor XY (exemplo)
variable_probe_speed: 300             # Velocidade de aproxima√ß√£o (mm/min)
variable_probe_speed_slow: 60         # Velocidade final de toque (mm/min)
variable_probe_distance: 10.0         # Dist√¢ncia m√°xima de sondagem
variable_samples: 3                   # N√∫mero de amostras por ferramenta
variable_tolerance: 0.02              # Toler√¢ncia entre amostras (mm)
gcode:
    {% set x_pos = params.X|default(100)|float %}
    {% set y_pos = params.Y|default(310)|float %}
    {% set z_pos = params.Z|default(5)|float %}
    {% set pin = params.PIN|default('host:gpio22')|string %}
    {% set speed = params.SPEED|default(300)|int %}
    {% set slow_speed = params.SLOW_SPEED|default(60)|int %}
    {% set distance = params.DISTANCE|default(10)|float %}
    {% set samples = params.SAMPLES|default(3)|int %}
    {% set tolerance = params.TOLERANCE|default(0.01)|float %}
    {% set xy_enabled = params.XY_ENABLED|default(True)|int %}
    {% set x_test_dist = params.X_TEST_DIST|default(10)|float %}
    {% set y_test_dist = params.Y_TEST_DIST|default(10)|float %}
    {% set xy_speed = params.XY_SPEED|default(300)|int %}
    
    # Salvar configura√ß√µes
    SAVE_VARIABLE VARIABLE=sensor_x_position VALUE={x_pos}
    SAVE_VARIABLE VARIABLE=sensor_y_position VALUE={y_pos}
    SAVE_VARIABLE VARIABLE=reference_z VALUE={z_pos}
    SAVE_VARIABLE VARIABLE=sensor_pin VALUE="{pin}"
    SAVE_VARIABLE VARIABLE=probe_speed VALUE={speed}
    SAVE_VARIABLE VARIABLE=probe_speed_slow VALUE={slow_speed}
    SAVE_VARIABLE VARIABLE=probe_distance VALUE={distance}
    SAVE_VARIABLE VARIABLE=samples VALUE={samples}
    SAVE_VARIABLE VARIABLE=tolerance VALUE={tolerance}
    SAVE_VARIABLE VARIABLE=xy_calibration_enabled VALUE={xy_enabled}
    SAVE_VARIABLE VARIABLE=pin_height VALUE={params.PIN_HEIGHT|default(3.0)|float}
    SAVE_VARIABLE VARIABLE=x_sweep_distance VALUE={params.X_SWEEP_DIST|default(15.0)|float}
    SAVE_VARIABLE VARIABLE=y_sweep_distance VALUE={params.Y_SWEEP_DIST|default(15.0)|float}
    SAVE_VARIABLE VARIABLE=xy_probe_speed VALUE={xy_speed}
    SAVE_VARIABLE VARIABLE=xy_sensor_enabled VALUE={params.XY_SENSOR_ENABLED|default(True)|int}
    SAVE_VARIABLE VARIABLE=xy_sensor_z VALUE={params.XY_SENSOR_Z|default(10.0)|float}
    
    RESPOND MSG="üìä Configura√ß√£o XYZ atualizada:"
    RESPOND MSG="   ‚Ä¢ Posi√ß√£o X: {x_pos}mm, Y: {y_pos}mm, Z: {z_pos}mm"
    RESPOND MSG="   ‚Ä¢ Velocidades: {speed}mm/min (Z), {xy_speed}mm/min (XY)"
    RESPOND MSG="   ‚Ä¢ Toler√¢ncia: {tolerance}mm"
    RESPOND MSG="   ‚Ä¢ Calibra√ß√£o XY: {'Habilitada' if xy_enabled else 'Desabilitada'}"
    RESPOND MSG="   ‚Ä¢ Pino de a√ßo: {params.PIN_HEIGHT|default(3.0)|float}mm altura"
    RESPOND MSG="   ‚Ä¢ Dist√¢ncias varredura: X={params.X_SWEEP_DIST|default(15.0)|float}mm, Y={params.Y_SWEEP_DIST|default(15.0)|float}mm"
    RESPOND MSG="   ‚Ä¢ Sensor XY dedicado: {'Habilitado' if params.XY_SENSOR_ENABLED|default(True)|int else 'Desabilitado'}"
    RESPOND MSG="   ‚Ä¢ Altura sensor XY: {params.XY_SENSOR_Z|default(10.0)|float}mm"

#####################################################################
#                    SENSOR DE TOQUE VIRTUAL                       #
#####################################################################
# Configura√ß√£o do sensor de toque para calibra√ß√£o Z
[probe touch_sensor]
pin: ^host:gpio22                     # Pin do sensor Z (ajustar conforme hardware)
x_offset: 0                           # Offset X do sensor em rela√ß√£o ao bico
y_offset: 0                           # Offset Y do sensor em rela√ß√£o ao bico
z_offset: 0                           # Ser√° calibrado automaticamente
speed: 5                              # Velocidade de aproxima√ß√£o
samples: 3                            # Amostras por medi√ß√£o
sample_retract_dist: 2.0              # Dist√¢ncia de retra√ß√£o entre amostras
samples_tolerance: 0.02               # Toler√¢ncia entre amostras
samples_tolerance_retries: 3          # Tentativas se toler√¢ncia excedida

# Configura√ß√£o do probe XY dedicado
[probe_xy]
pin: ^PA1                             # Pin do sensor XY dedicado (com pullup)
speed: 3                              # Velocidade de aproxima√ß√£o XY
samples: 2                            # N√∫mero de amostras XY
sample_retract_dist: 1.0              # Dist√¢ncia de retra√ß√£o XY
samples_tolerance: 0.01               # Toler√¢ncia XY
samples_tolerance_retries: 2          # Tentativas XY

#####################################################################
#                 CALIBRA√á√ÉO AUTOM√ÅTICA COMPLETA                   #
#####################################################################
[gcode_macro CALIB_AUTO_ALL]
description: Calibra√ß√£o autom√°tica de todas as ferramentas
gcode:
    {% set config = printer["gcode_macro CAL_CFG"] %}
    
    RESPOND MSG="ü§ñ INICIANDO CALIBRA√á√ÉO AUTOM√ÅTICA"
    RESPOND MSG="üìç Posi√ß√£o de refer√™ncia: X{config.reference_x} Y{config.reference_y}"
    
    # Verifica√ß√µes de seguran√ßa
    {% if not printer.toolhead.homed_axes %}
        RESPOND MSG="‚ùå ERRO: Eixos n√£o calibrados. Execute G28 primeiro."
        {action_raise_error("Eixos n√£o calibrados")}
    {% endif %}
    
    # Aquecimento m√≠nimo para evitar danos
    RESPOND MSG="üî• Aquecendo ferramentas para temperatura m√≠nima..."
    M104 S180 T0  # T0
    M104 S180 T1  # T1
    M104 S180 T2  # T2
    M104 S180 T3  # T3
    
    # Aguardar aquecimento
    M109 S180 T0
    RESPOND MSG="‚úÖ Aquecimento conclu√≠do"
    
    # Calibrar cada ferramenta
    CAL_TOOL TOOL=0
    CAL_TOOL TOOL=1
    CAL_TOOL TOOL=2
    CAL_TOOL TOOL=3
    
    # Finalizar
    RESPOND MSG="üéâ CALIBRA√á√ÉO AUTOM√ÅTICA CONCLU√çDA!"
    STATUS_CALIBRACAO_INDEPENDENTE
    
    # Resfriar ferramentas
    M104 S0 T0
    M104 S0 T1
    M104 S0 T2
    M104 S0 T3

#####################################################################
#              CALIBRA√á√ÉO AUTOM√ÅTICA INDIVIDUAL                    #
#####################################################################
[gcode_macro CAL_TOOL]
description: Calibra√ß√£o autom√°tica de uma ferramenta espec√≠fica
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    {% set config = printer["gcode_macro CAL_CFG"] %}
    
    RESPOND MSG="üîß Calibrando ferramenta T{tool}..."
    
    # Ativar ferramenta
    T{tool}
    G4 P2000  # Aguardar estabiliza√ß√£o
    
    # Posicionar sobre ponto de refer√™ncia
    G90
    G1 X{config.reference_x} Y{config.reference_y} Z{config.reference_z} F{config.probe_speed}
    
    # Executar sondagem autom√°tica
    {% set measurements = [] %}
    {% for sample in range(config.samples) %}
        RESPOND MSG="üìè Amostra {sample + 1}/{config.samples} para T{tool}"
        
        # Sondagem com sensor de toque
        PROBE_TCH
        
        # Capturar posi√ß√£o Z
        {% set z_pos = printer.toolhead.position.z %}
        {% set measurements = measurements + [z_pos] %}
        
        # Retra√ß√£o para pr√≥xima amostra
        G1 Z{config.reference_z} F{config.probe_speed}
        G4 P1000
    {% endfor %}
    
    # Calcular m√©dia e verificar toler√¢ncia
    {% set avg_z = (measurements|sum) / measurements|length %}
    {% set max_dev = 0.0 %}
    {% for measurement in measurements %}
        {% set deviation = (measurement - avg_z)|abs %}
        {% if deviation > max_dev %}
            {% set max_dev = deviation %}
        {% endif %}
    {% endfor %}
    
    {% if max_dev > config.tolerance %}
        RESPOND MSG="‚ö†Ô∏è AVISO: Desvio m√°ximo {max_dev|round(4)}mm excede toler√¢ncia {config.tolerance}mm"
    {% endif %}
    
    # Salvar offset calculado
    {% if tool == 0 %}
        # T0 √© refer√™ncia - salvar posi√ß√£o absoluta
        SAVE_VARIABLE VARIABLE=reference_z_position VALUE={avg_z}
        RESPOND MSG="‚úÖ T0 (refer√™ncia): Z={avg_z|round(4)}mm salvo"
    {% else %}
        # Calcular offset relativo a T0
        {% set ref_z = printer.save_variables.variables.get('reference_z_position', avg_z) %}
        {% set relative_offset = avg_z - ref_z %}
        
        {% if tool == 1 %}
            SAVE_VARIABLE VARIABLE=tool_0_offset_z VALUE={relative_offset}
        {% elif tool == 2 %}
            SAVE_VARIABLE VARIABLE=tool_1_offset_z VALUE={relative_offset}
        {% elif tool == 3 %}
            SAVE_VARIABLE VARIABLE=tool_2_offset_z VALUE={relative_offset}
        {% endif %}
        
        RESPOND MSG="‚úÖ T{tool}: Offset Z={relative_offset|round(4)}mm salvo (desvio: ¬±{max_dev|round(4)}mm)"
    {% endif %}
    
    # Exibir offset atual
    OFFSET_ATUAL
    
    # Sincronizar com TOOL_DATA
    INIT_TOOL_OFFSETS

#####################################################################
#                    SONDAGEM COM SENSOR DE TOQUE                  #
#####################################################################
[gcode_macro PROBE_TCH]
description: Sondagem usando sensor de toque
gcode:
    {% set config = printer["gcode_macro CAL_CFG"] %}
    
    # Aproxima√ß√£o r√°pida
    G91  # Modo relativo
    G1 Z-{config.probe_distance} F{config.probe_speed}
    
    # Aguardar estabiliza√ß√£o do sensor
    G4 P500
    
    # Verificar se sensor foi acionado
    {% if printer['probe touch_sensor'].last_result %}
        RESPOND MSG="‚úÖ Contato detectado"
    {% else %}
        RESPOND MSG="‚ùå ERRO: Sensor n√£o detectou contato"
        {action_raise_error("Falha na detec√ß√£o de contato")}
    {% endif %}
    
    G90  # Voltar ao modo absoluto

#####################################################################
#                    MACROS DE CALIBRA√á√ÉO                          #
#####################################################################

# Macro para calibra√ß√£o autom√°tica de offset X usando sensor dedicado
[gcode_macro CAL_X_AUTO]
description: Calibra automaticamente o offset X usando sensor XY dedicado
gcode:
    {% set tool = params.TOOL|default(printer.toolhead.extruder)|string %}
    {% set svv = printer.save_variables.variables %}
    {% set ref_x = svv.reference_x|default(100.0) %}
    {% set ref_y = svv.reference_y|default(310.0) %}
    {% set pin_height = svv.pin_height|default(3.0) %}
    {% set sweep_distance = svv.x_sweep_distance|default(15.0) %}
    {% set probe_speed = svv.xy_probe_speed|default(300) %}
    {% set xy_enabled = svv.xy_sensor_enabled|default(True) %}
    
    RESPOND MSG="üîß Iniciando calibra√ß√£o X com sensor dedicado para {tool}"
    
    # Ativar ferramenta
    T{tool[-1]}
    
    # Home se necess√°rio
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
    # Verificar se sensor XY dedicado est√° habilitado
    {% if xy_enabled %}
        # Usar sensor XY dedicado
        {% set sensor_z = svv.xy_sensor_z|default(10.0) %}
        G90
        G1 X{ref_x - sweep_distance} Y{ref_y} Z{sensor_z} F3000
        
        RESPOND MSG="üìç Varrendo com sensor XY dedicado..."
        
        # Movimento de varredura com sensor dedicado
        VARRER_LATERAL_X_DEDICADO START_X={ref_x - sweep_distance} END_X={ref_x + sweep_distance} STEP=0.3 SPEED={probe_speed}
    {% else %}
        # Fallback para m√©todo tradicional
        G90
        G1 X{ref_x - sweep_distance} Y{ref_y} Z{pin_height} F3000
        
        RESPOND MSG="üìç Varrendo lateralmente para detectar pino de a√ßo..."
        
        # Movimento de varredura tradicional
        VARRER_LATERAL_X START_X={ref_x - sweep_distance} END_X={ref_x + sweep_distance} STEP=0.5 SPEED={probe_speed}
    {% endif %}
    
    # Obter posi√ß√£o de contato detectada
    {% set contact_x = printer.save_variables.variables.last_contact_x|default(ref_x) %}
    
    # Calcular offset X baseado na posi√ß√£o de contato
    {% set offset_x = contact_x - ref_x %}
    
    # Salvar offset em variables.cfg (n√£o em tool_data)
    {% set offset_var = "tool_offset_x_" + tool %}
    SAVE_VARIABLE VARIABLE={offset_var} VALUE={offset_x}
    
    # Marcar ferramenta como calibrada
    SAVE_VARIABLE VARIABLE=tool_{tool}_xy_calibrated VALUE=1
    
    RESPOND MSG="‚úÖ Offset X calibrado: {offset_x:.3f}mm para {tool} (contato em X{contact_x:.3f}) - salvo em variables.cfg"
    
    # Exibir offset atual
    OFFSET_ATUAL
    
    # Retornar para posi√ß√£o segura
    G1 Z20 F3000

# Macro para sondagem XY com sensor dedicado
[gcode_macro PROBE_XY]
description: Sonda usando sensor XY dedicado
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set xy_enabled = svv.xy_sensor_enabled|default(True) %}
    
    {% if xy_enabled %}
        # Usar sensor XY dedicado
        QUERY_PROBE_XY
        {% if printer['probe_xy'].last_query %}
            RESPOND MSG="üéØ Contato detectado pelo sensor XY dedicado"
        {% else %}
            RESPOND MSG="‚ùå Nenhum contato detectado pelo sensor XY"
        {% endif %}
    {% else %}
        # Fallback para sensor Z tradicional
        QUERY_PROBE
        {% if printer['probe'].last_query %}
            RESPOND MSG="üéØ Contato detectado pelo sensor Z (fallback)"
        {% else %}
            RESPOND MSG="‚ùå Nenhum contato detectado"
        {% endif %}
    {% endif %}

# Macro para varredura lateral X com sensor dedicado
[gcode_macro VARRER_X]
description: Varre lateralmente usando sensor XY dedicado
gcode:
    {% set start_x = params.START_X|float %}
    {% set end_x = params.END_X|float %}
    {% set step = params.STEP|default(0.3)|float %}
    {% set speed = params.SPEED|default(200)|int %}
    {% set svv = printer.save_variables.variables %}
    {% set xy_sensor_z = svv.xy_sensor_z|default(10.0) %}
    
    {% set current_x = start_x %}
    {% set contact_detected = False %}
    
    # Posicionar na altura do sensor XY
    G1 Z{xy_sensor_z} F1000
    
    # Loop de varredura com sensor dedicado
    {% for i in range(((end_x - start_x) / step)|int + 1) %}
        {% if not contact_detected %}
            {% set move_x = start_x + (i * step) %}
            G1 X{move_x} F{speed}
            
            # Verificar contato com sensor XY dedicado
            QUERY_PROBE_XY
            {% if printer['probe_xy'].last_query %}
                SAVE_VARIABLE VARIABLE=last_contact_x VALUE={move_x}
                {% set contact_detected = True %}
                RESPOND MSG="üéØ Contato XY detectado em X{move_x:.3f}"
                # Pequeno recuo ap√≥s detec√ß√£o
                G1 X{move_x - 1} F{speed}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if not contact_detected %}
        RESPOND MSG="‚ö†Ô∏è Nenhum contato XY detectado durante varredura X"
        SAVE_VARIABLE VARIABLE=last_contact_x VALUE={start_x + ((end_x - start_x) / 2)}
    {% endif %}

# Macro para calibra√ß√£o autom√°tica de offset Y usando sensor dedicado
[gcode_macro CAL_Y_AUTO]
description: Calibra automaticamente o offset Y usando sensor XY dedicado
gcode:
    {% set tool = params.TOOL|default(printer.toolhead.extruder)|string %}
    {% set svv = printer.save_variables.variables %}
    {% set ref_x = svv.reference_x|default(100.0) %}
    {% set ref_y = svv.reference_y|default(310.0) %}
    {% set pin_height = svv.pin_height|default(3.0) %}
    {% set sweep_distance = svv.y_sweep_distance|default(15.0) %}
    {% set probe_speed = svv.xy_probe_speed|default(300) %}
    {% set xy_enabled = svv.xy_sensor_enabled|default(True) %}
    
    RESPOND MSG="üîß Iniciando calibra√ß√£o Y com sensor dedicado para {tool}"
    
    # Ativar ferramenta
    T{tool[-1]}
    
    # Home se necess√°rio
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
    # Verificar se sensor XY dedicado est√° habilitado
    {% if xy_enabled %}
        # Usar sensor XY dedicado
        {% set sensor_z = svv.xy_sensor_z|default(10.0) %}
        G90
        G1 X{ref_x} Y{ref_y - sweep_distance} Z{sensor_z} F3000
        
        RESPOND MSG="üìç Varrendo com sensor XY dedicado..."
        
        # Movimento de varredura com sensor dedicado
        VARRER_LATERAL_Y_DEDICADO START_Y={ref_y - sweep_distance} END_Y={ref_y + sweep_distance} STEP=0.3 SPEED={probe_speed}
    {% else %}
        # Fallback para m√©todo tradicional
        G90
        G1 X{ref_x} Y{ref_y - sweep_distance} Z{pin_height} F3000
        
        RESPOND MSG="üìç Varrendo lateralmente para detectar pino de a√ßo..."
        
        # Movimento de varredura tradicional
        VARRER_LATERAL_Y START_Y={ref_y - sweep_distance} END_Y={ref_y + sweep_distance} STEP=0.5 SPEED={probe_speed}
    {% endif %}
    
    # Obter posi√ß√£o de contato detectada
    {% set contact_y = printer.save_variables.variables.last_contact_y|default(ref_y) %}
    
    # Calcular offset Y baseado na posi√ß√£o de contato
    {% set offset_y = contact_y - ref_y %}
    
    # Salvar offset em variables.cfg (n√£o em tool_data)
    {% set offset_var = "tool_offset_y_" + tool %}
    SAVE_VARIABLE VARIABLE={offset_var} VALUE={offset_y}
    
    # Marcar ferramenta como calibrada
    SAVE_VARIABLE VARIABLE=tool_{tool}_xy_calibrated VALUE=1
    
    RESPOND MSG="‚úÖ Offset Y calibrado: {offset_y:.3f}mm para {tool} (contato em Y{contact_y:.3f}) - salvo em variables.cfg"
    
    # Exibir offset atual
    OFFSET_ATUAL
    
    # Retornar para posi√ß√£o segura
    G1 Z20 F3000

# Macro para varredura lateral Y com sensor dedicado
[gcode_macro VARRER_Y]
description: Varre lateralmente usando sensor XY dedicado no eixo Y
gcode:
    {% set start_y = params.START_Y|float %}
    {% set end_y = params.END_Y|float %}
    {% set step = params.STEP|default(0.3)|float %}
    {% set speed = params.SPEED|default(200)|int %}
    {% set svv = printer.save_variables.variables %}
    {% set xy_sensor_z = svv.xy_sensor_z|default(10.0) %}
    
    {% set current_y = start_y %}
    {% set contact_detected = False %}
    
    # Posicionar na altura do sensor XY
    G1 Z{xy_sensor_z} F1000
    
    # Loop de varredura com sensor dedicado
    {% for i in range(((end_y - start_y) / step)|int + 1) %}
        {% if not contact_detected %}
            {% set move_y = start_y + (i * step) %}
            G1 Y{move_y} F{speed}
            
            # Verificar contato com sensor XY dedicado
            QUERY_PROBE_XY
            {% if printer['probe_xy'].last_query %}
                SAVE_VARIABLE VARIABLE=last_contact_y VALUE={move_y}
                {% set contact_detected = True %}
                RESPOND MSG="üéØ Contato XY detectado em Y{move_y:.3f}"
                # Pequeno recuo ap√≥s detec√ß√£o
                G1 Y{move_y - 1} F{speed}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if not contact_detected %}
        RESPOND MSG="‚ö†Ô∏è Nenhum contato XY detectado durante varredura Y"
        SAVE_VARIABLE VARIABLE=last_contact_y VALUE={start_y + ((end_y - start_y) / 2)}
    {% endif %}

#####################################################################
# SISTEMA DE SALVAMENTO E CARREGAMENTO DE OFFSETS
#####################################################################

# Macro para carregar offsets XY salvos em variables.cfg
[gcode_macro LOAD_XY]
description: Carrega offsets XY salvos em variables.cfg para todas as ferramentas
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set tools = ['extruder', 'extruder1', 'extruder2', 'extruder3', 'extruder4'] %}
    
    RESPOND MSG="üîÑ Carregando offsets XY salvos em variables.cfg..."
    
    {% for tool in tools %}
        {% if tool in printer.toolhead.extruders %}
            {% set offset_x_var = "tool_offset_x_" + tool %}
            {% set offset_y_var = "tool_offset_y_" + tool %}
            {% set calibrated_var = "tool_" + tool + "_xy_calibrated" %}
            
            {% if offset_x_var in svv and offset_y_var in svv %}
                {% set offset_x = svv[offset_x_var] %}
                {% set offset_y = svv[offset_y_var] %}
                {% set is_calibrated = svv[calibrated_var]|default(0) %}
                
                # Aplicar offsets salvos
                T{loop.index0}  # Ativar ferramenta
                SET_GCODE_OFFSET X={offset_x} Y={offset_y}
                
                RESPOND MSG="‚úÖ {tool}: X{offset_x:.3f} Y{offset_y:.3f} {'(calibrado)' if is_calibrated else '(n√£o calibrado)'}"
            {% else %}
                RESPOND MSG="‚ö†Ô∏è {tool}: Sem offsets XY salvos"
            {% endif %}
        {% endif %}
    {% endfor %}
    
    RESPOND MSG="üîÑ Carregamento de offsets XY conclu√≠do"

# Macro para verificar se ferramenta precisa de calibra√ß√£o XY
[gcode_macro VERIFICAR_CALIBRACAO_XY]
description: Verifica se a ferramenta atual precisa de calibra√ß√£o XY
gcode:
    {% set tool = params.TOOL|default(printer.toolhead.extruder)|string %}
    {% set svv = printer.save_variables.variables %}
    {% set calibrated_var = "tool_" + tool + "_xy_calibrated" %}
    {% set is_calibrated = svv[calibrated_var]|default(0) %}
    
    {% if not is_calibrated %}
        RESPOND MSG="‚ö†Ô∏è Ferramenta {tool} precisa de calibra√ß√£o XY"
        RESPOND MSG="   Execute: CALIBRAR_OFFSET_X_AUTO TOOL={tool}"
        RESPOND MSG="   Execute: CALIBRAR_OFFSET_Y_AUTO TOOL={tool}"
        return
    {% endif %}
    
    RESPOND MSG="‚úÖ Ferramenta {tool} j√° est√° calibrada para XY"

# Macro para limpar dados de calibra√ß√£o XY de uma ferramenta
[gcode_macro LIMPAR_CALIBRACAO_XY]
description: Remove dados de calibra√ß√£o XY de uma ferramenta espec√≠fica
gcode:
    {% set tool = params.TOOL|default(printer.toolhead.extruder)|string %}
    {% set svv = printer.save_variables.variables %}
    
    # Remover vari√°veis de offset
    {% set offset_x_var = "tool_offset_x_" + tool %}
    {% set offset_y_var = "tool_offset_y_" + tool %}
    {% set calibrated_var = "tool_" + tool + "_xy_calibrated" %}
    
    SAVE_VARIABLE VARIABLE={offset_x_var} VALUE=0
    SAVE_VARIABLE VARIABLE={offset_y_var} VALUE=0
    SAVE_VARIABLE VARIABLE={calibrated_var} VALUE=0
    
    # Resetar offsets ativos
    SET_GCODE_OFFSET X=0 Y=0
    
    RESPOND MSG="üóëÔ∏è Calibra√ß√£o XY removida para {tool}"
    RESPOND MSG="   Offsets resetados para X=0 Y=0"

# Macro para detectar mudan√ßa de ferramenta e verificar calibra√ß√£o
[gcode_macro VERIF_MUDANCA]
description: Verifica se houve mudan√ßa de ferramenta e se precisa calibra√ß√£o
gcode:
    {% set current_tool = printer.toolhead.extruder %}
    {% set svv = printer.save_variables.variables %}
    {% set last_tool = svv.last_active_tool|default('') %}
    
    {% if current_tool != last_tool %}
        SAVE_VARIABLE VARIABLE=last_active_tool VALUE="{current_tool}"
        RESPOND MSG="üîÑ Mudan√ßa de ferramenta detectada: {last_tool} ‚Üí {current_tool}"
        
        # Verificar se nova ferramenta precisa calibra√ß√£o
        VERIFICAR_CALIBRACAO_XY TOOL={current_tool}
        
        # Carregar offsets da nova ferramenta
        {% set offset_x_var = "tool_offset_x_" + current_tool %}
        {% set offset_y_var = "tool_offset_y_" + current_tool %}
        
        {% if offset_x_var in svv and offset_y_var in svv %}
            {% set offset_x = svv[offset_x_var] %}
            {% set offset_y = svv[offset_y_var] %}
            SET_GCODE_OFFSET X={offset_x} Y={offset_y}
            RESPOND MSG="üìç Offsets XY aplicados: X{offset_x:.3f} Y{offset_y:.3f}"
        {% endif %}
    {% endif %}

#####################################################################
# MACROS DE TESTE E DIAGN√ìSTICO DO SENSOR XY
#####################################################################

# Macro para testar sensor XY dedicado
[gcode_macro TESTAR_SENSOR_XY]
description: Testa o funcionamento do sensor XY dedicado
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set xy_enabled = svv.xy_sensor_enabled|default(True) %}
    
    {% if not xy_enabled %}
        RESPOND MSG="‚ö†Ô∏è Sensor XY dedicado est√° desabilitado"
        RESPOND MSG="   Use: CALIBRACAO_AUTO_CONFIG XY_SENSOR_ENABLED=1"
        return
    {% endif %}
    
    RESPOND MSG="üîß Testando sensor XY dedicado..."
    
    # Testar query do sensor
    QUERY_PROBE_XY
    {% set sensor_state = printer['probe_xy'].last_query %}
    
    RESPOND MSG="üìä Estado atual do sensor XY: {'ATIVADO' if sensor_state else 'INATIVO'}"
    
    # Informa√ß√µes do sensor
    {% set xy_sensor_x = svv.xy_sensor_x|default(150.0) %}
    {% set xy_sensor_y = svv.xy_sensor_y|default(150.0) %}
    {% set xy_sensor_z = svv.xy_sensor_z|default(10.0) %}
    {% set xy_sensor_pin = svv.xy_sensor_pin|default('^PA1') %}
    
    RESPOND MSG="üìç Configura√ß√£o do sensor XY:"
    RESPOND MSG="   ‚Ä¢ Posi√ß√£o: X{xy_sensor_x} Y{xy_sensor_y} Z{xy_sensor_z}"
    RESPOND MSG="   ‚Ä¢ Pino: {xy_sensor_pin}"
    RESPOND MSG="   ‚Ä¢ Status: {'Operacional' if not sensor_state else 'Detectando contato'}"

# Macro para calibrar posi√ß√£o do sensor XY
[gcode_macro CALIB_SENSOR_XY]
description: Calibra a posi√ß√£o f√≠sica do sensor XY dedicado
gcode:
    {% set x_pos = params.X|default(150.0)|float %}
    {% set y_pos = params.Y|default(150.0)|float %}
    {% set z_pos = params.Z|default(10.0)|float %}
    
    SAVE_VARIABLE VARIABLE=xy_sensor_x VALUE={x_pos}
    SAVE_VARIABLE VARIABLE=xy_sensor_y VALUE={y_pos}
    SAVE_VARIABLE VARIABLE=xy_sensor_z VALUE={z_pos}
    
    RESPOND MSG="‚úÖ Posi√ß√£o do sensor XY atualizada:"
    RESPOND MSG="   X{x_pos} Y{y_pos} Z{z_pos}"
    
    # Testar nova posi√ß√£o
    G90
    G1 X{x_pos} Y{y_pos} Z{z_pos} F3000
    TESTAR_SENSOR_XY

# Macro para diagn√≥stico completo do sistema XY
[gcode_macro DIAGNOSTICO_SISTEMA_XY]
description: Executa diagn√≥stico completo do sistema de detec√ß√£o XY
gcode:
    RESPOND MSG="üîç Iniciando diagn√≥stico completo do sistema XY..."
    
    # Verificar configura√ß√µes
    {% set svv = printer.save_variables.variables %}
    {% set xy_enabled = svv.xy_sensor_enabled|default(True) %}
    {% set x_sweep = svv.x_sweep_distance|default(15.0) %}
    {% set y_sweep = svv.y_sweep_distance|default(15.0) %}
    
    RESPOND MSG="üìä Configura√ß√µes atuais:"
    RESPOND MSG="   ‚Ä¢ Sensor XY: {'Habilitado' if xy_enabled else 'Desabilitado'}"
    RESPOND MSG="   ‚Ä¢ Dist√¢ncia varredura X: {x_sweep}mm"
    RESPOND MSG="   ‚Ä¢ Dist√¢ncia varredura Y: {y_sweep}mm"
    
    # Testar sensor
    TESTAR_SENSOR_XY
    
    # Testar movimento para posi√ß√£o do sensor
    {% if xy_enabled %}
        {% set xy_sensor_x = svv.xy_sensor_x|default(150.0) %}
        {% set xy_sensor_y = svv.xy_sensor_y|default(150.0) %}
        {% set xy_sensor_z = svv.xy_sensor_z|default(10.0) %}
        
        RESPOND MSG="üöÄ Movendo para posi√ß√£o do sensor XY..."
        G90
        G1 X{xy_sensor_x} Y{xy_sensor_y} Z{xy_sensor_z} F3000
        
        # Verificar estado ap√≥s movimento
        G4 P500  # Aguardar estabiliza√ß√£o
        QUERY_PROBE_XY
        {% set final_state = printer['probe_xy'].last_query %}
        RESPOND MSG="‚úÖ Diagn√≥stico conclu√≠do. Sensor: {'ATIVO' if final_state else 'INATIVO'}"
    {% endif %}

#####################################################################
# MACROS DE INFORMA√á√ÉO E EXIBI√á√ÉO
#####################################################################

# Macro para exibir offsets XYZ aplicados (para Fluidd)
[gcode_macro EXIBIR_OFFSETS_XYZ]
description: Exibe os offsets XYZ atualmente aplicados para todas as ferramentas (lidos de variables.cfg)
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_tool = printer.toolhead.extruder %}
    
    RESPOND MSG="üìè OFFSETS XYZ APLICADOS (variables.cfg):"
    RESPOND MSG="‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # Exibir offset da ferramenta atual
    {% set tool_x = svv.get('tool_offset_x_' + current_tool, 0.0) %}
    {% set tool_y = svv.get('tool_offset_y_' + current_tool, 0.0) %}
    {% set tool_z = svv.get('tool_offset_z_' + current_tool, 0.0) %}
    {% set calibrated_var = "tool_" + current_tool + "_xy_calibrated" %}
    {% set is_calibrated = svv.get(calibrated_var, 0) %}
    
    RESPOND MSG="üîß FERRAMENTA ATIVA ({current_tool}):"
    RESPOND MSG="   X: {tool_x:+.3f}mm | Y: {tool_y:+.3f}mm | Z: {tool_z:+.3f}mm"
    RESPOND MSG="   Status XY: {'‚úÖ Calibrado' if is_calibrated else '‚ö†Ô∏è N√£o calibrado'}"
    
    # Exibir offsets de todas as ferramentas configuradas
    RESPOND MSG=""
    RESPOND MSG="üìã TODAS AS FERRAMENTAS:"
    
    {% for key, value in svv.items() %}
        {% if key.startswith('tool_offset_z_') %}
            {% set tool_name = key.replace('tool_offset_z_', '') %}
            {% set x_offset = svv.get('tool_offset_x_' + tool_name, 0.0) %}
            {% set y_offset = svv.get('tool_offset_y_' + tool_name, 0.0) %}
            {% set z_offset = value %}
            {% set tool_calibrated_var = "tool_" + tool_name + "_xy_calibrated" %}
            {% set tool_is_calibrated = svv.get(tool_calibrated_var, 0) %}
            
            {% if tool_name == current_tool %}
                RESPOND MSG="‚û§ {tool_name}: X{x_offset:+.3f} Y{y_offset:+.3f} Z{z_offset:+.3f} {'‚úÖ' if tool_is_calibrated else '‚ö†Ô∏è'} ‚Üê ATIVA"
            {% else %}
                RESPOND MSG="   {tool_name}: X{x_offset:+.3f} Y{y_offset:+.3f} Z{z_offset:+.3f} {'‚úÖ' if tool_is_calibrated else '‚ö†Ô∏è'}"
            {% endif %}
        {% endif %}
    {% endfor %}
    
    RESPOND MSG="‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# Macro para exibir offsets de uma ferramenta espec√≠fica
[gcode_macro SHOW_OFFSETS]
description: Exibe os offsets XYZ de uma ferramenta espec√≠fica (lidos de variables.cfg)
variable_ferramenta: 'extruder'
gcode:
    {% set tool_name = params.TOOL|default(printer.toolhead.extruder)|string %}
    {% set svv = printer.save_variables.variables %}
    
    RESPOND MSG="üìè OFFSETS DA FERRAMENTA {tool_name.upper()} (variables.cfg):"
    RESPOND MSG="‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    {% set offset_x_var = "tool_offset_x_" + tool_name %}
    {% set offset_y_var = "tool_offset_y_" + tool_name %}
    {% set offset_z_var = "tool_offset_z_" + tool_name %}
    {% set calibrated_var = "tool_" + tool_name + "_xy_calibrated" %}
    
    {% set offset_x = svv[offset_x_var]|default(0) %}
    {% set offset_y = svv[offset_y_var]|default(0) %}
    {% set offset_z = svv[offset_z_var]|default(0) %}
    {% set is_calibrated = svv[calibrated_var]|default(0) %}
    
    RESPOND MSG="üîß {tool_name.upper()}:"
    RESPOND MSG="   X: {offset_x:+.3f}mm"
    RESPOND MSG="   Y: {offset_y:+.3f}mm"
    RESPOND MSG="   Z: {offset_z:+.3f}mm"
    RESPOND MSG="   Status XY: {'‚úÖ Calibrado' if is_calibrated else '‚ö†Ô∏è N√£o calibrado'}"
    
    {% if tool_name == printer.toolhead.extruder %}
        RESPOND MSG="üìç Esta √© a ferramenta ativa"
    {% endif %}
    
    RESPOND MSG="‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# Macro para exibir offset da ferramenta atual (vers√£o compacta)
[gcode_macro OFFSET_ATUAL]
description: Exibe offset XYZ da ferramenta atual de forma compacta
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_tool = printer.toolhead.extruder %}
    {% set tool_x = svv.get('tool_offset_x_' + current_tool, 0.0) %}
    {% set tool_y = svv.get('tool_offset_y_' + current_tool, 0.0) %}
    {% set tool_z = svv.get('tool_offset_z_' + current_tool, 0.0) %}
    {% set calibrated_var = "tool_" + current_tool + "_xy_calibrated" %}
    {% set is_calibrated = svv.get(calibrated_var, 0) %}
    
    RESPOND MSG="üîß {current_tool}: X{tool_x:+.3f} Y{tool_y:+.3f} Z{tool_z:+.3f} {'‚úÖ' if is_calibrated else '‚ö†Ô∏è'}"

# Macro de inicializa√ß√£o - carrega offsets XY salvos automaticamente
[gcode_macro INICIALIZAR_OFFSETS_XY]
description: Carrega automaticamente os offsets XY salvos em variables.cfg na inicializa√ß√£o
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_tool = printer.toolhead.extruder %}
    
    RESPOND MSG="üîÑ Inicializando sistema de offsets XY..."
    
    # Carregar offsets da ferramenta atual
    CARREGAR_OFFSETS_XY TOOL={current_tool}
    
    # Verificar se a ferramenta atual est√° calibrada
    {% set calibrated_var = "tool_" + current_tool + "_xy_calibrated" %}
    {% set is_calibrated = svv.get(calibrated_var, 0) %}
    
    {% if is_calibrated %}
        RESPOND MSG="‚úÖ Ferramenta {current_tool} carregada com offsets calibrados"
    {% else %}
        RESPOND MSG="‚ö†Ô∏è Ferramenta {current_tool} n√£o possui calibra√ß√£o XY"
        RESPOND MSG="üí° Execute CALIBRAR_OFFSET_X_AUTO e CALIBRAR_OFFSET_Y_AUTO para calibrar"
    {% endif %}
    
    RESPOND MSG="üîÑ Sistema de offsets XY inicializado"

# Macro para chamada autom√°tica no START_PRINT
[gcode_macro AUTO_CARREGAR_OFFSETS]
description: Carrega automaticamente os offsets da ferramenta ativa (para usar no START_PRINT)
gcode:
    {% set current_tool = printer.toolhead.extruder %}
    {% set svv = printer.save_variables.variables %}
    
    # Carregar offsets da ferramenta atual
    CARREGAR_OFFSETS_XY TOOL={current_tool}
    
    # Verificar calibra√ß√£o
    {% set calibrated_var = "tool_" + current_tool + "_xy_calibrated" %}
    {% set is_calibrated = svv.get(calibrated_var, 0) %}
    
    {% if is_calibrated %}
        {% set offset_x = svv.get("tool_offset_x_" + current_tool, 0) %}
        {% set offset_y = svv.get("tool_offset_y_" + current_tool, 0) %}
        RESPOND MSG="‚úÖ Offsets XY aplicados: X{offset_x:+.3f} Y{offset_y:+.3f}"
    {% else %}
        RESPOND MSG="‚ö†Ô∏è ATEN√á√ÉO: Ferramenta {current_tool} n√£o calibrada!"
        RESPOND MSG="üí° Recomenda-se calibrar antes da impress√£o"
    {% endif %}

# Sistema de detec√ß√£o de mudan√ßa de ferramentas
[gcode_macro DETECT_CHANGE]
description: Detecta mudan√ßa de ferramenta e aplica offsets automaticamente
variable_ferramenta_anterior: 'extruder'
gcode:
    {% set current_tool = printer.toolhead.extruder %}
    {% set previous_tool = printer["gcode_macro DETECTAR_MUDANCA_FERRAMENTA"].ferramenta_anterior %}
    
    {% if current_tool != previous_tool %}
        RESPOND MSG="üîÑ Mudan√ßa de ferramenta detectada: {previous_tool} ‚Üí {current_tool}"
        
        # Salvar nova ferramenta como anterior
        SET_GCODE_VARIABLE MACRO=DETECTAR_MUDANCA_FERRAMENTA VARIABLE=ferramenta_anterior VALUE="'{current_tool}'"
        
        # Carregar offsets da nova ferramenta
        CARREGAR_OFFSETS_XY TOOL={current_tool}
        
        # Verificar se a nova ferramenta est√° calibrada
        VERIFICAR_CALIBRACAO_XY TOOL={current_tool}
        
        RESPOND MSG="‚úÖ Offsets aplicados para {current_tool}"
    {% endif %}

# Macro para integra√ß√£o autom√°tica com T0, T1, etc.
[gcode_macro T0]
rename_existing: T0_BASE
description: Troca para extruder e aplica offsets automaticamente
gcode:
    T0_BASE
    DETECTAR_MUDANCA_FERRAMENTA

[gcode_macro T1]
rename_existing: T1_BASE
description: Troca para extruder1 e aplica offsets automaticamente
gcode:
    T1_BASE
    DETECTAR_MUDANCA_FERRAMENTA

[gcode_macro T2]
rename_existing: T2_BASE
description: Troca para extruder2 e aplica offsets automaticamente
gcode:
    T2_BASE
    DETECTAR_MUDANCA_FERRAMENTA

[gcode_macro T3]
rename_existing: T3_BASE
description: Troca para extruder3 e aplica offsets automaticamente
gcode:
    T3_BASE
    DETECTAR_MUDANCA_FERRAMENTA

# Macro para verificar automaticamente mudan√ßas de ferramenta
[gcode_macro AUTO_VERIF]
description: Verifica automaticamente se houve mudan√ßa de ferramenta (para usar em loops)
gcode:
    DETECTAR_MUDANCA_FERRAMENTA

# Macro para integra√ß√£o com Fluidd (chamada autom√°tica)
[gcode_macro STATUS_OFFSETS]
description: Status dos offsets para integra√ß√£o com Fluidd
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set current_tool = printer.toolhead.extruder %}
    {% set tool_x = svv.get('tool_offset_x_' + current_tool, 0.0) %}
    {% set tool_y = svv.get('tool_offset_y_' + current_tool, 0.0) %}
    {% set tool_z = svv.get('tool_offset_z_' + current_tool, 0.0) %}
    
    # Mensagem formatada para Fluidd
    RESPOND TYPE=echo MSG="Offsets {current_tool}: X{tool_x:+.3f} Y{tool_y:+.3f} Z{tool_z:+.3f}"

#####################################################################
# MACROS DE CALIBRA√á√ÉO XYZ COMPLETA
#####################################################################

# Macro para calibra√ß√£o autom√°tica completa XYZ
[gcode_macro CALIB_XYZ_AUTO]
description: Calibra automaticamente todos os offsets XYZ da ferramenta
gcode:
    {% set tool = params.TOOL|default(printer.toolhead.extruder)|string %}
    {% set svv = printer.save_variables.variables %}
    {% set xy_enabled = svv.xy_calibration_enabled|default(True) %}
    
    RESPOND MSG="üöÄ Iniciando calibra√ß√£o autom√°tica XYZ completa para {tool}"
    
    # Calibrar Z (sempre)
    RESPOND MSG="üìê Calibrando offset Z..."
    CALIBRAR_AUTO_FERRAMENTA TOOL={tool}
    
    # Calibrar X e Y se habilitado
    {% if xy_enabled %}
        RESPOND MSG="üìê Calibrando offset X..."
        CALIBRAR_OFFSET_X_AUTO TOOL={tool}
        
        RESPOND MSG="üìê Calibrando offset Y..."
        CALIBRAR_OFFSET_Y_AUTO TOOL={tool}
    {% endif %}
    
    # Exibir resultados
    {% set z_var = "tool_offset_z_" + tool %}
    {% set x_var = "tool_offset_x_" + tool %}
    {% set y_var = "tool_offset_y_" + tool %}
    {% set z_offset = printer.save_variables.variables[z_var]|default(0.0) %}
    {% set x_offset = printer.save_variables.variables[x_var]|default(0.0) %}
    {% set y_offset = printer.save_variables.variables[y_var]|default(0.0) %}
    
    RESPOND MSG="üéâ Calibra√ß√£o XYZ completa finalizada para {tool}!"
    
    # Exibir offsets finais de forma detalhada
    EXIBIR_OFFSETS_XYZ
    
    # Aplicar offsets imediatamente
    SET_GCODE_OFFSET X={x_offset} Y={y_offset} Z={z_offset}
    
    RESPOND MSG="üéØ Offsets aplicados e salvos!"

# Macro para calibra√ß√£o de todas as ferramentas XYZ
[gcode_macro CALIB_ALL_XYZ]
description: Calibra automaticamente XYZ para todas as ferramentas
gcode:
    {% set tools = ['extruder', 'extruder1', 'extruder2', 'extruder3'] %}
    
    RESPOND MSG="üîÑ Iniciando calibra√ß√£o XYZ para todas as ferramentas"
    
    {% for tool in tools %}
        {% if tool in printer %}
            RESPOND MSG="üîß Calibrando {tool}..."
            CALIBRAR_XYZ_AUTO_COMPLETO TOOL={tool}
            G4 P2000  # Pausa de 2 segundos entre ferramentas
        {% endif %}
    {% endfor %}
    
    RESPOND MSG="‚úÖ Calibra√ß√£o XYZ completa para todas as ferramentas!"

#####################################################################
#                      DIAGN√ìSTICO DO SENSOR                       #
#####################################################################
[gcode_macro TESTAR_SENSOR_TOQUE]
description: Teste do sensor de toque
gcode:
    {% set config = printer["gcode_macro CALIBRACAO_AUTO_CONFIG"] %}
    
    RESPOND MSG="üîç TESTE DO SENSOR DE TOQUE"
    RESPOND MSG="üìç Pin configurado: {config.sensor_pin}"
    
    # Verificar estado atual do sensor
    {% set sensor_state = printer['probe touch_sensor'].last_result %}
    RESPOND MSG="üìä Estado atual: {'ACIONADO' if sensor_state else 'LIVRE'}"
    
    # Teste de movimento para verificar funcionamento
    RESPOND MSG="üß™ Posicione manualmente o bico na superf√≠cie e execute novamente"
    
    # Hist√≥rico de medi√ß√µes
    {% if printer.save_variables.variables.get('reference_z_position') %}
        {% set ref_z = printer.save_variables.variables.reference_z_position %}
        RESPOND MSG="üìè √öltima refer√™ncia T0: Z={ref_z|round(4)}mm"
    {% endif %}

#####################################################################
#                    CONFIGURA√á√ÉO DE HARDWARE                      #
#####################################################################
# INSTRU√á√ïES DE INSTALA√á√ÉO:
#
# 1. SENSOR RECOMENDADO:
#    - Sensor capacitivo (ex: LJ12A3-4-Z/BX)
#    - Sensor piezoel√©trico
#    - Microswitch de precis√£o
#
# 2. POSICIONAMENTO:
#    - Instalar sensor pr√≥ximo ao bico ativo
#    - Ou usar superf√≠cie de refer√™ncia fixa na mesa
#
# 3. CONEX√ÉO EL√âTRICA:
#    - Conectar ao pin host:gpio22 (ou outro dispon√≠vel)
#    - Usar pullup interno (^host:gpio22)
#    - Verificar l√≥gica: HIGH quando acionado
#
# 4. SUPERF√çCIE DE REFER√äNCIA:
#    - Material condutor para sensor capacitivo
#    - Superf√≠cie plana e est√°vel
#    - Posi√ß√£o acess√≠vel por todas as ferramentas
#
# 5. CALIBRA√á√ÉO INICIAL:
#    - Execute TESTAR_SENSOR_TOQUE primeiro
#    - Ajuste altura da superf√≠cie de refer√™ncia
#    - Teste com uma ferramenta antes da calibra√ß√£o completa

#####################################################################
#                         VANTAGENS DO SISTEMA                     #
#####################################################################
# ‚úÖ Calibra√ß√£o totalmente autom√°tica
# ‚úÖ Repetibilidade alta (¬±0.01mm t√≠pico)
# ‚úÖ N√£o requer interven√ß√£o do usu√°rio
# ‚úÖ Suporte para troca de ferramentas diferentes
# ‚úÖ Detec√ß√£o autom√°tica de problemas
# ‚úÖ Hist√≥rico de calibra√ß√µes
# ‚úÖ Integra√ß√£o com sistema existente
# ‚úÖ Compensa√ß√£o autom√°tica de temperatura
# ‚úÖ Valida√ß√£o de toler√¢ncias
# ‚úÖ Backup autom√°tico de configura√ß√µes