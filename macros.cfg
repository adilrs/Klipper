[gcode_macro LOAD_FILAMENT]
gcode:
    M117 Carregando filamento...
    M83                         ; modo relativo
    G91                         ; movimentos relativos
    G1 E800 F5000                 ; empurra 40mm de filamento lentamente
    G1 E20 F1200                ; empurra mais r√°pido para limpar entrada
    G90                         ; volta ao modo absoluto
    M117 Filamento carregado.


[gcode_macro UNLOAD_FILAMENT]
gcode:
    M117 Removendo filamento...
    M83                         ; modo relativo
    G91                         ; movimentos relativos
    G1 E-10 F1000               ; recuo r√°pido inicial
    G1 E-800 F5000                ; recuo lento para puxar completamente
    G90                         ; modo absoluto
    M117 Filamento removido.

 
[gcode_macro OFFSET]
gcode:
  {% if "Z" not in params %}
    RESPOND PREFIX="ERROR" MSG="Uso: OFFSET Z=-1.2 [SAVE=1]"
    G4 P0
  {% endif %}

  {% set z = params.Z|float %}
  {% set save = params.SAVE|default(0)|int %}
  {% set tool = printer["gcode_macro TOOL_STATE"].tool|int %}
  {% set msg = "Aplicando offset Z=" ~ z|string ~ " para TOOL=" ~ tool|string %}

  RESPOND PREFIX="INFO" MSG="{msg}"
  SET_GCODE_OFFSET Z={z} MOVE=1
  G91
  G1 Z0.01 F300
  G1 Z-0.01 F300
  G90
  M117 {msg}

  {% if save == 1 %}
    {% if tool == 1 %}
      SET_GCODE_VARIABLE MACRO=TOOL_STATE VARIABLE=z0 VALUE={z}
      SAVE_VARIABLE VARIABLE=z0 VALUE={z}
    {% elif tool == 2 %}
      SET_GCODE_VARIABLE MACRO=TOOL_STATE VARIABLE=z1 VALUE={z}
      SAVE_VARIABLE VARIABLE=z1 VALUE={z}
    {% elif tool == 3 %}
      SET_GCODE_VARIABLE MACRO=TOOL_STATE VARIABLE=z2 VALUE={z}
      SAVE_VARIABLE VARIABLE=z2 VALUE={z}
    {% elif tool == 4 %}
      SET_GCODE_VARIABLE MACRO=TOOL_STATE VARIABLE=z3 VALUE={z}
      SAVE_VARIABLE VARIABLE=z3 VALUE={z}
    {% else %}
      RESPOND PREFIX="ERROR" MSG="Ferramenta ativa inv√°lida para salvar offset"
      G4 P0
    {% endif %}
    {% set save_msg = "Offset Z=" ~ z|string ~ " salvo para TOOL=" ~ tool|string %}
    RESPOND PREFIX="INFO" MSG="{save_msg}"
    M117 {save_msg}
  {% endif %}



[gcode_macro CALIBRAR_SGTHRS]
description: "Testa valores de SGTHRS para sensorless homing"
gcode:
  {% set eixo = params.EIXO|default("X")|upper %}
  {% set valor = params.VALOR|default(100)|int %}

  {% if eixo not in ["X", "Y"] %}
    M117 EIXO inv√°lido: use X ou Y
    RETURN
  {% endif %}

  {% set stepper = "stepper_" ~ eixo|lower %}
  {% set comando = "SET_TMC_FIELD STEPPER=" ~ stepper ~ " FIELD=SGTHRS VALUE=" ~ valor %}
  {% set msg = "Aplicando SGTHRS=" ~ valor ~ " no eixo " ~ eixo %}
  RESPOND PREFIX="SGTHRS" MSG="{msg}"
  {comando}

  {% if eixo == "X" %}
    G28 X
  {% elif eixo == "Y" %}
    G28 Y
  {% endif %}

  RESPOND PREFIX="SGTHRS" MSG="Use DUMP_TMC STEPPER={stepper} para ver sg_result"
  M117 SGTHRS={valor} aplicado no eixo {eixo}
# üåü INICIALIZA√á√ÉO
#############################################

[gcode_macro STARTUP]
gcode:
  {% set saved_tool = printer.save_variables.variables.tool|default(1)|int %}
  {% set show_t = saved_tool - 1 %}  # Para exibir T0..T2
  
  # Verificar se LIDAR est√° ativo para detec√ß√£o f√≠sica
  {% if printer["gcode_macro LIDAR_MODE"].status %}
    {% set lidar = printer["gcode_macro DISTANCIA_VL53"].distancia|float %}
    RESPOND PREFIX="INFO" MSG="üîç LIDAR ativo - verificando presen√ßa f√≠sica (LIDAR: {lidar}mm)"
    
    # Com LIDAR ativo, verificar presen√ßa f√≠sica
    {% if lidar <= 110 %}
      RESPOND PREFIX="INFO" MSG="‚úÖ Ferramenta f√≠sica detectada - restaurando estado salvo"
      SET_GCODE_VARIABLE MACRO=TOOL_STATE VARIABLE=tool VALUE={saved_tool}
      RESPOND PREFIX="INFO" MSG="üîÑ Estado restaurado: T{show_t} (TOOL={saved_tool})"
    {% else %}
      RESPOND PREFIX="WARNING" MSG="‚ö†Ô∏è Nenhuma ferramenta f√≠sica detectada - aguardando comando manual"
      RESPOND PREFIX="INFO" MSG="üí° Sistema aguardando: Use T0, T1 ou T2 para carregar ferramenta"
      SET_GCODE_VARIABLE MACRO=TOOL_STATE VARIABLE=tool VALUE=0  # Estado vazio
      SAVE_VARIABLE VARIABLE=tool VALUE=0
      {% set saved_tool = 0 %}
      {% set show_t = "?" %}
      M117 Aguardando ferramenta...
      # N√£o aplicar offsets nem ativar extrusora - aguardar comando
      RETURN
    {% endif %}
  {% else %}
    # LIDAR desativado - confiar no estado salvo
    RESPOND PREFIX="INFO" MSG="üö´ LIDAR desativado - confiando no estado salvo"
    SET_GCODE_VARIABLE MACRO=TOOL_STATE VARIABLE=tool VALUE={saved_tool}
    RESPOND PREFIX="INFO" MSG="üîÑ Estado restaurado: T{show_t} (TOOL={saved_tool})"
    RESPOND PREFIX="WARNING" MSG="üí° Ative o LIDAR com 'LIDAR_ON' para detec√ß√£o f√≠sica"
  {% endif %}
  
  M117 Sistema iniciando: T{show_t}
  
  # Carregar offsets Z
  INIT_TOOL_OFFSETS
  
  # Aguardar um momento para garantir que os valores foram carregados
  G4 P200
  
  # Ativar extrusora correta e aplicar offsets
  {% set vars = printer.save_variables.variables %}
  {% set extruders = {
    1: "extruder", 2: "extruder1", 3: "extruder2"
  } %}
  
  {% if saved_tool == 1 %}
    # T0 sempre tem offset zero (refer√™ncia)
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    RESPOND PREFIX="INFO" MSG="üéØ T0: Extruder ativado, offset ZERO aplicado (refer√™ncia BLTouch)"
  {% elif saved_tool == 2 %}
    # T1 - X/Y fixos do TOOL_DATA, Z direto do variables.cfg
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    {% set x = printer['gcode_macro TOOL_DATA']['offset_x2']|default(0)|float %}
    {% set y = printer['gcode_macro TOOL_DATA']['offset_y2']|default(0)|float %}
    {% set z = vars.get('tool_0_offset_z', 0.0)|float %}
    SET_GCODE_OFFSET X={x} Y={y} Z={z}
    RESPOND PREFIX="INFO" MSG="üéØ T1: Extruder1 ativado, offset aplicado X={x} Y={y} Z={z} (Z direto de variables.cfg)"
  {% elif saved_tool == 3 %}
    # T2 - X/Y fixos do TOOL_DATA, Z direto do variables.cfg
    ACTIVATE_EXTRUDER EXTRUDER=extruder2
    {% set x = printer['gcode_macro TOOL_DATA']['offset_x3']|default(0)|float %}
    {% set y = printer['gcode_macro TOOL_DATA']['offset_y3']|default(0)|float %}
    {% set z = vars.get('tool_1_offset_z', 0.0)|float %}
    SET_GCODE_OFFSET X={x} Y={y} Z={z}
    RESPOND PREFIX="INFO" MSG="üéØ T2: Extruder2 ativado, offset aplicado X={x} Y={y} Z={z} (Z direto de variables.cfg)"
  {% endif %}
  
  RESPOND PREFIX="INFO" MSG="‚úÖ Sistema inicializado - T{show_t} ativa com extrusora e offsets corretos"
  M117 Sistema pronto - T{show_t} ativa


#############################################
# ‚öôÔ∏è CONFIGURA√á√ÉO DO SERVO
#############################################

#[output_pin tool_servo]
#pin: rpi:gpio26
#pwm: True
#hardware_pwm: True
#scale: 180
##cycle_time: 0.02
#shutdown_value: 0


[servo tool_servo]
pin:host:gpio17  #26
#   PWM output pin controlling the servo. This parameter must be
#   provided.
maximum_servo_angle: 180
#   The maximum angle (in degrees) that this servo can be set to. The
#   default is 180 degrees.
minimum_pulse_width: 0.001
#   The minimum pulse width time (in seconds). This should correspond
#   with an angle of 0 degrees. The default is 0.001 seconds.
maximum_pulse_width: 0.002
#   The maximum pulse width time (in seconds). This should correspond
#   with an angle of maximum_servo_angle. The default is 0.002
#   seconds.
####initial_angle:180
#   Initial angle (in degrees) to set the servo to. The default is to
#   not send any signal at startup.
#initial_pulse_width: 2
#   Initial pulse width time (in seconds) to set the servo to. (This
#   is only valid if initial_angle is not set.) The default is to not
#   send any signal at startup.

 

[include tools.cfg]
  
#############################################
# üîç DIAGN√ìSTICOS E TESTES
#############################################

[gcode_macro Z_UP_RELEASE]
gcode:
  G91
  G1 Z10 F600
  G90
  M18

 

[gcode_macro TEST_PROBE_RESPONSE]
description: "Testa resposta do BLTouch"
gcode:
  M117 Teste BLTouch
  G28 Z
  PROBE
  M117 PROBE executado ‚Äì veja log

[gcode_macro PROBE_ACCURACY10]
description: "10 medidas no mesmo ponto"
gcode:
  G1 Z8 F600
  PROBE_ACCURACY SAMPLES=10

#############################################
# üñ®Ô∏è ROTINAS DE IMPRESS√ÉO
#############################################

[gcode_macro PRINT_START]
description: "In√≠cio autom√°tico da impress√£o"
gcode:
  G28
  Z_TILT_ADJUST
  BED_MESH_PROFILE LOAD=default
  G1 Z5 F600
  G1 X0 Y0 F3600
  M117 Impress√£o iniciada

[gcode_macro PRINT_END]
gcode:
  M104 S0
  M140 S0
  M106 S0
  G91
  G1 Z10 F600
  G90
  #G28XY
  #G1 X0 Y200 F6000
  #M84
  M117 Fim da impress√£o

#############################################
# üß™ NIVELAMENTO AUTOM√ÅTICO
#############################################


[gcode_macro G29]
description: "Nivelamento com salvamento autom√°tico, feito uma √∫nica vez por sess√£o"
variable_mesh_done: False
gcode:
    # Debug
    {action_respond_info("=== DEBUG G29 ===")}
    {action_respond_info("mesh_done atual: %s" % printer["gcode_macro G29"].mesh_done)}
    {action_respond_info("bed_mesh profile ativo: %s" % printer.bed_mesh.profile_name)}

    {% set homed = printer.toolhead.homed_axes.upper() %}
    {% if 'X' in homed and 'Y' in homed and 'Z' in homed %}

        {% if not printer["gcode_macro G29"].mesh_done %}
            {action_respond_info("EXECUTANDO: Iniciando novo nivelamento")}
            SET_GCODE_OFFSET X=0 Y=0 Z=0
            SAVE_GCODE_STATE NAME=mesh_state
            G91
            G1 Z10 F600
            G90
            M117 Iniciando nivelamento...
            BED_MESH_CALIBRATE MOVE_Z=8
            BED_MESH_PROFILE SAVE=default
            SET_GCODE_VARIABLE MACRO=G29 VARIABLE=mesh_done VALUE=True
            G91
            G1 Z10 F600
            G90
            RESTORE_GCODE_STATE NAME=mesh_state MOVE=1
            M117 Nivelamento salvo no perfil default
            {action_respond_info("CONCLU√çDO: mesh_done definido como True")}
        {% else %}
            M117 Nivelamento j√° foi feito nesta sess√£o ‚Äî pulando
            {action_respond_info("PULANDO: mesh_done = True - nivelamento j√° foi feito")}
        {% endif %}

    {% else %}
        M117 Homing completo (G28) necess√°rio antes do G29
        {action_respond_info("ERRO: Eixos n√£o foram homed")}
    {% endif %}
    APPLY_TOOL_OFFSET
 

  
[gcode_macro DEBUG_G29]
gcode:
  {action_respond_info("=== STATUS G29 ===")}
  {action_respond_info("mesh_done: %s" % printer["gcode_macro G29"].mesh_done)}
  {action_respond_info("bed_mesh profile: %s" % printer.bed_mesh.profile_name)}
  {action_respond_info("==================")}

  

[gcode_macro FG29]
description: "For√ßa novo nivelamento da malha"
gcode:
  M117 For√ßando novo nivelamento...
  SET_GCODE_VARIABLE MACRO=G29 VARIABLE=mesh_done VALUE=False
  G29
  
[gcode_macro TEST_SENSORLESS_LIMITS]
description: "Descobre os limites f√≠sicos dos eixos X e Y usando sensorless homing"
gcode:
    G91
    G1 Z5 F600
    G90
    G28 X Y
    G91
    SET_VELOCITY_LIMIT VELOCITY=100 ACCEL=500
    RESPOND PREFIX="TEST" MSG="Movendo eixo X at√© o limite..."
    {% for i in range(50) %}
      G1 X10 F3000
    {% endfor %}
    RESPOND PREFIX="TEST" MSG="Movendo eixo Y at√© o limite..."
    {% for i in range(50) %}
      G1 Y10 F3000
    {% endfor %}
    G90
    GET_POSITION
    RESPOND PREFIX="TEST" MSG="Verifique o terminal acima: use os valores de X e Y como 'position_max' no printer.cfg"
          ; zera extrusora
[gcode_macro PLA]
description: Ajusta temperaturas para impress√£o com PLA
gcode:
  M117 Configurando PLA...
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=200
  SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=200
  SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET=200
  
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
  RESPOND MSG="Temperaturas PLA aplicadas: T0=200¬∞C, T1=200¬∞C, Cama=60¬∞C"

[gcode_macro TEST_SPEED]
description: Teste de velocidade e acelera√ß√£o m√°xima
gcode:
  {% set speed = params.SPEED|default(300)|int %}
  {% set accel = params.ACCEL|default(4000)|int %}
  {% set iterations = params.ITERATIONS|default(5)|int %}

  RESPOND MSG="üèÅ Iniciando TEST_SPEED com SPEED={speed} mm/s, ACCEL={accel} mm/s¬≤, ITERA√á√ïES={iterations}"

  SAVE_GCODE_STATE NAME=TEST_SPEED
  #G28
  G90
  G1 Z10 F3000

  SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}

  {% for i in range(iterations) %}
    G1 X20 Y20 F{speed*60}
    G1 X180 Y180 F{speed*60}
    G1 X20 Y180 F{speed*60}
    G1 X180 Y20 F{speed*60}
    G1 X100 Y100 F{speed*60}
  {% endfor %}

  RESTORE_GCODE_STATE NAME=TEST_SPEED
  RESPOND MSG="‚úÖ TEST_SPEED conclu√≠do. Verifique se houve skipping ou ru√≠do excessivo."


[gcode_macro M106]
gcode:
  {% set speed = params.S|default(255)|int %}
  {% set fan_speed = speed / 255.0 %}
  #SET_FAN_SPEED fan=Print_Cooling SPEED=0.2   ; Liga a 20%
  SET_FAN_SPEED fan=Print_Cooling SPEED={fan_speed}
[gcode_macro M107]
gcode:
  SET_FAN_SPEED fan=Print_Cooling SPEED=0.0